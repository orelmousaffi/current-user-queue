#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('game-queue-lobby:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 * Initialize Socket.io listener
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var crypto  = require('crypto');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Listen on the connection event for any incoming sockets
 */
Array.prototype.hasEmail = function(username) {
  var valid = false;

  if (this.length > 0) {
    this.forEach(function(next) {
      if (next.username === username) {
        valid = true;
        return;
      }
    });
  }
  return valid;
};

Array.prototype.removeByEmail = function(username) {
  if (this.size > 0) {
    this.forEach(function(next, index) {
      if (username === next.username) {
        this.splice(index, 1);
        return;
      }
    });
  }
}

var onlineUsers = [];

function connectToUser(username)
{
  var opponent = onlineUsers[0];

  if(typeof opponent !== 'undefined') {
    opponent = (opponent.username !== username) ? opponent = onlineUsers.shift() : null;

    return opponent;
  }
  return false;
}

io.on("connection", function(socket) {

  console.log("A user has connected");

  /*socket.on("chat", function(msg) {
    console.log("Message from user: " + msg);

    io.emit("chat", msg);
  });*/

  socket.on("subscribe", function(username) {

    var opponent = connectToUser(username);

    if (!opponent && !onlineUsers.hasEmail(username)) {
        var room = crypto.randomBytes(32).toString('hex');
        var nextUser = {
          username: username,
          pairingKey: room
        }

        socket.join(room);
        onlineUsers.push(nextUser);
    }
    else {

      if (opponent)
      {
        socket.join(opponent.pairingKey);
        onlineUsers.removeByEmail(username);

        io.sockets.in(opponent.pairingKey).emit('private match', {
          message : username + " vs " + opponent.username,
          pairingKey : opponent.pairingKey
        });
      }
    }
    io.emit("show users", onlineUsers);
  });

  socket.on("play", function (data) {
    io.sockets.in(data.pairingKey).emit('private match', {
      message : data.message
    });
  });

  socket.on("show users", function() {
    io.emit("show users", onlineUsers);
  });

  socket.on("disconnect", function() {
    console.log("A user has disconnected")
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
